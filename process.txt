
Kanban Board Events

To verify your work locally for just this module, run the following command in a terminal: npm run test:module1. The output will let you know which tasks are passing and failing. To verify your work on Pluralsight, commit and push your changes to GitHub or upload your project folder and click the Check My Work button.

    1

Create an Item
2
Set Item Attributes

The item variable now stores a reference to a fully fledged DOM element. We can manipulate anything about this element. Below the existing code in the create_item() function, use the add method of the classList object to add the existing CSS class of item to the item element.

Next, give the item an id of item- plus the current value of order.

Finally, make the item draggable.

Are you adding a class of item to the item?
Compare solution
3
dragstart Event Listener

Now that the item is draggable, add an event listener that listens for the dragstart event to item. When creating the event listener, pass an arrow function as the handler. The arrow function should accept a single parameter of event, and it should return a call to the setData() method. The setData() method is part of the DataTransfer object, which needs to be accessed through the event.

Use the setData() method to set 'text' to the id of the event.target element.

Are you adding an event listener to item that listens for the dragstart event?
Compare solution
4
dragend Event Listener

After the dragstart event listener, add an event listener that listens for the dragend event to item.

When creating the event listener, pass an arrow function as the handler. The arrow function should accept a single parameter of event, and it should return a call to the clearData() method. The clearData() method is part of the DataTransfer object, which needs to be accessed through the event.

Are you adding an event listener to item that listens for the dragend event?
Compare solution
5
Create input Element

Below the drag event listeners, use the createElement() method to create a DOM element of type input. Save a reference to the element in a variable called input.

Append this new input element to the item element with the correct DOM method.

Are you creating a variable called input and assigning it a call to the createElement() function
Compare solution
6
Create a Save Button

Below the input element, use the createElement() method to create a DOM element of type button. Save a reference to the element in a variable called save_btn.

Change the innerHTML property of the save_btn element to Save.

Are you creating a variable called save_btn and assigning it a call to the createElement() function
Compare solution
7
Save Button Event Listener

We can now add an event listener to save_btn. Below the existing code, register an event listener for save_btn that listens for a click event. Pass an arrow function as the handler. The arrow function does not need to accept any parameters.

Are you adding a click event listener to the save_btn button?
Compare solution
8
Validate Input - if conditional

In the body of the save_btn event handler, set the HTML of the error element to an empty string.

Next, create an if statement that tests whether the value of input is not equal to an empty string.

Are setting the HTML of error to an empty string?
Compare solution
9
Validate Input - if body

Add three lines in the body of the if statement. The first should add 1 to order and reassign the value back to order. The second should change the HTML of the item element to the value of the input. The third should toggle adding to false.

Are you creating an if statement to check if input.value is empty?
Compare solution
10
Validate Input - else body

Still in the save_btn handler, add an else statement to the existing if statement. In the body of this else statement, set the HTML of the error element to the message string.

Are you creating an else statement?
Compare solution
11
Append the Save Button

Now that all parts of the save_btn are complete, append it to the item element. With this item is now complete as well, return it from the create_item() function.

Are you appending save_btn to item?
Compare solution
12
Drop Event - Handler

Below the create_item() function, find the forEach loop. In the body, add an event listener that listens for the drop event to element. When creating the event listener, pass an arrow function as the handler. The arrow function should accept a single parameter of event.

To begin the event handler, prevent the default action of event.

Are you adding an event listener to element that listens for the drop event?
Compare solution
13
Drop Event - Data Transfer

Still in the drop event handler, get the data in 'text' with the getData() method. The getData() method is part of the DataTransfer object, which needs to be accessed through the event. Store the returned value in a constant called id.

Are you adding an event listener to element that listens for the drop event?
Compare solution
14
Drop Event - Append Element

As the last line of the drop event handler, append the element that has an id of id to event.target. Hint: use the getElementById() method of document.

Are you adding an event listener to element that listens for the drop event?
Compare solution
15
Drag Event - Handler

Still in the forEach() loop function, add an event listener that listens for the dragover event to element. When creating the event listener, pass an arrow function as the handler. The arrow function should accept a single parameter of event and prevent the default action of event.

Are you adding an event listener to element that listens for the dragover event?
Compare solution
Projects logo
Build a Kanban Board with JavaScript

    1. What We'll Build
    2. Get the Code
    3. Local Environment Setup
    4. Verify Local Environment

            1. Create an Item
            2. Set Item Attributes
            3. dragstart Event Listener
            4. dragend Event Listener
            5. Create input Element
            6. Create a Save Button
            7. Save Button Event Listener
            8. Validate Input - if conditional
            9. Validate Input - if body
            10. Validate Input - else body
            11. Append the Save Button
            12. Drop Event - Handler
            13. Drop Event - Data Transfer
            14. Drop Event - Append Element
            15. Drag Event - Handler

